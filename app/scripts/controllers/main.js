'use strict';

/**
 * @ngdoc function
 * @name itmUiApp.controller:MainCtrl
 * @description
 * # MainCtrl
 * Controller of the itmUiApp
 */
angular.module('itmUiApp')
  .controller('MainCtrl', function($scope, $state, $http, TopicService, $mdDialog) {

    // get the current user
    $scope.user = TopicService.getUser();
    $scope.isDirty = false;
    $scope.iterationCount = 0;
    $scope.totalTopics = 0;

    // if we don't have a user, go to the login page
    if (!$scope.user) {
      $state.go('login');
    } else {

      // if we do have a user, start the tutorial
      $scope.tutorial = {
        'complete': false,
        'step': 0,
        'nextEnabled': true,
        'flags': {}
      };

      $scope.questionnaire = {
        'complete': false,
        'step': 0,
        'answers': {}
      };

      $scope.task = {
        'started': false
      };

      // pop up a modal about the tutorial
      // alert the user that they need to remove the word including
      if (!$scope.tutorial.complete) {
        $scope.iterationCount = 10;
        $mdDialog.show(
          $mdDialog.alert()
          //.parent(angular.element(document.body))
          .clickOutsideToClose(false)
          .htmlContent('This tool allows you to explore and modify topics (themes) in a collection of documents. These topics are generated by a computer-based system. Each topic is represented by a list of words that make up the topic and a list of documents that are associated with the topic. <br/> <br/> We will begin with a tutorial to walk you through using the tool. Please follow the instructions in the left panel and click "Next" to continue through each tutorial step.')
          .ariaLabel('Tutorial Dialog')
          .ok('OK')
        );
      }

      // $scope.documents = [];
      $scope.topics = [];
      $scope.topicsCopy = [];
      $scope.refinements = [];
      $scope.mode = undefined;
      $scope.merged = [];
      $scope.loading = true;
      $scope.stops = [];
      $scope.vocab = [];

      // DEFAULT VALUES FOR CORPORA AND TOPIC NUMBERS
      $scope.corpus = "bbc_news";
      $scope.topicNums = 10;

      // METHODS REQUIRED FOR DROPPABLE TRASH CAN
      var dragOverHandler = function(ev) {
        ev.preventDefault();
      };

      var dropHandler = function(ev) {
        ev.preventDefault();
      };

      angular.element(document).find('.stop-words').on('dragover', dragOverHandler);
      angular.element(document).find('.stop-words').on('drop', dropHandler);


      // TRACK THE TASK TIME
      $scope.$on('timer-tick', function (event, data) {
        $scope.taskTime = data.millis;
      });

      // Get all corpora
      TopicService.getCorpora().then(function(data) {
        $scope.corpora = data.data.corpus;
      }, function(error) {
        console.error('error getting corpora');
      });

      /**
      * Method used to refresh the model.
      */
      var reloadModel = function() {
        console.log('refresh the model for the task');
        $scope.topics = $scope.topicsCopy;
        $scope.selectedTopic = $scope.topics[0];
        $scope.topics[0].selected = true;
        $scope.merged = [];
        $scope.refinements = [];
        $scope.isDirty = false;
        $scope.stops = [];
      };

      /**
      * Method to load a model.
      */
      var loadModel = function(index) {
        $scope.loading = true;
        TopicService.loadModel($scope.corpus, $scope.topicNums, $scope.iterationCount, $scope.tutorial.complete).then(function(data) {
          console.log("loaded the model for " + $scope.corpus);
          processModel(data.data);

          // Select to display the first topic in the list
          if (index) {
            $scope.selectedIndex = index;
          } else {
            $scope.selectedIndex = 0;
          }
          $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
          $scope.topicsCopy = angular.copy($scope.topics);
          $scope.topics[$scope.selectedIndex].selected = true;
          $scope.totalTopics = $scope.topics.length;
          // });
        }, function() {
          // on error
          console.error("error loading initial model");
        });

        // get the vocabulary
        TopicService.getVocab($scope.corpus).then(function(response) {
          console.log('loaded the vocabulary for ' + $scope.corpus);
          $scope.vocab = response.data;
        }, function(error) {
          console.error('error loading vocabulary');
        });
      };

      // Load the intial model
      loadModel(3);

      /**
      * Method to end the tutorial
      */
      $scope.endTutorial = function() {
        // pop up message with instructions
        $mdDialog.show(
          $mdDialog.alert()
          .clickOutsideToClose(false)
          .htmlContent('In the tutorial, you saw different refinement operations for improving the topics generated by the system. We will now show you a new topic model for a dataset of 9000 tweets.')
          .ariaLabel('Tutorial Complete Dialog')
          .ok('OK')
        ).then(function() {
          $scope.tutorial.complete = true;
          $scope.iterationCount = 0;
          // load ITM with the task url, but do not yet start the timer
          $scope.corpus = "twitter";
          $scope.topicNums = 10;
          loadModel();
          // pop up message with instructions
          $mdDialog.show(
            $mdDialog.alert()
            .clickOutsideToClose(false)
            .htmlContent('For your task, assume that you work for a travel blog and your boss has asked you to <b>write a blog post about the common complaints that travelers have when flying</b>. <br/><br/> To help you with your task, the system has gathered 9000 tweets of people complaining about their air travel experience directed at various popular airlines. <b>The system has generated an initial set of 10 topics to organize these tweets</b>. <br/><br/> Your task is to <b>improve these topics so that you can use them to write a blog post about common air travel complaints with a few example tweets from each</b>. You should improve the topics using the refinements explained in the study. <br/><br/> To start we would like you to answer a few questions related to this initial set of topics. <b>Please spend a minute or so reviewing these initial topics and then click "START QUESTIONNAIRE" in the left panel.</b>')
            .ariaLabel('Questionnaire Start Dialog')
            .ok('OK')
          ).then(function() {
            // now the user can look around at the model and answer the questions but we don't want them to be able to make any changes

          });
        });
      };

      $scope.startTask = function() {
        // pop up message with instructions
        $mdDialog.show(
          $mdDialog.alert()
          .clickOutsideToClose(false)
          .htmlContent('Now we will begin the task. Remember that for this task you have been asked to <b>organize a dataset of 9000 tweets to use for writing a blog post about common air travel complaints</b>. To do so, you will <b>improve the system-generated topics by making changes using the tool</b>. <br/><br/>Remember that you can add words to a topic, remove words from a single topic, trash words from all topics, change word order in a topic, remove documents from a topic, merge topics, split topics, delete topics, and create new topics. <br/><br/> If you are not happy with the model after an update, you can click to "UNDO LAST REFINEMENT" in the top left corner. <br/></br/> You should spend about 30 minutes refining these categories. <b>When you are satisfied with the organization of tweets by the types of complaints, press the FINISH TASK button.</b>')
          .ariaLabel('Task Start Dialog')
          .ok('OK')
        ).then(function() {
          // start the timer
          $scope.task.started = true;
          // load ITM with the task url
          // TODO: should not need to reload the model (but also might be super fast if cached)
          //$scope.corpus = "twitter";
          //$scope.topicNums = 10;
          reloadModel();
          //loadModel();
        });

      };

      $scope.finishTask = function() {
        var url = "https://docs.google.com/forms/d/e/1FAIpQLSeP7mF6oNDMYIEkBAepFqlfYcPcmDC1oLtwxEF1fn0xOiHmgw/viewform?usp=pp_url&entry.1909515008=" + $scope.user + "&entry.822203201=" + $scope.questionnaire.answers[1] + "&entry.298976279&entry.1930377152";
        // only allow the user to click this button after it has been 15 minutes
        if ($scope.taskTime > 900000) {
          $mdDialog.show(
            $mdDialog.alert()
              .clickOutsideToClose(false)
              .textContent('Please spend at least 15 minutes refining the topics to better organize the tweets into common air travel complaints.')
              .ariaLabel('keep working alert')
              .ok('OK')
          ).then(function() {
              // continue task
          });
        } else {
          $mdDialog.show(
            $mdDialog.confirm()
              .textContent('Are you sure you are ready to complete the task?')
              .ariaLabel('Task finish confirmation')
              .ok('OK')
              .cancel('cancel')
              ).then(function() {
                $mdDialog.show(
                  $mdDialog.alert()
                  .clickOutsideToClose(false)
                  .htmlContent('Thank you for changing the topics to better organize the tweets. To finish up, we would like you to answer a few questions related to the final topics that you have generated. Click "ok" below and the questionnaire will open in a google form in a new window or click this <a target="_blank" href="' + url + '">link</a>. <br/><br/> <b>Note: you may have to enable popups in your browser for the questionnaire to open.')
                  .ariaLabel('Task finish Dialog')
                  .ok('OK')
                ).then(function() {
                  window.open(url, '_blank');
                  console.log('user has completed the task and continued to the post-task questionnaire');
                  $scope.task.started = false;
                  $scope.task.completed = true;
                });
            }, function() {
              // cancel
            });
        }

      };

      /**
       * Dialog box to allow the user to set the corpus and number of topics for the interface.
       */
      $scope.configureModel = function(ev) {
        $mdDialog.show({
            controller: DialogController,
            templateUrl: 'views/configure-model.tmpl.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true,
            locals: {
              corpus: $scope.corpus,
              number: $scope.topicNums,
              corpora: $scope.corpora
            }
          })
          .then(function(data) {
            $scope.corpus = data.corpus;
            $scope.topicNums = data.number;
            loadModel();
          }, function() {
            //cancel
          });
      };

      function DialogController($scope, $mdDialog, corpus, number, corpora) {
        $scope.corpus = corpus;
        $scope.number = number;
        $scope.corpora = corpora;
        $scope.hide = function() {
          $mdDialog.hide();
        };
        $scope.cancel = function() {
          $mdDialog.cancel();
        };
        $scope.submit = function(corpus, number) {
          var data = {
            corpus: corpus,
            number: number
          };
          $mdDialog.hide(data);
        };
      };

      /**
       * Method to process the model returned from the server
       */
      function processModel(data) {
        $scope.topics = data.topics;

        // determine the display words for each topic
        _.each($scope.topics, function(topic) {
          // set the topic id based on its index
          // TODO: should use a unique id
          if (!topic.id) {
            topic.id = topic.topicindex;
          }

          // choose the topic label as the first three words of the topic
          var display = '';
          display += topic.words[0].word + ' ' + topic.words[1].word + ' ' + topic.words[2].word;
          topic.displayWords = display;

          // set document to unevalauted and compute snippet
          _.each(topic.docs, function(doc) {
            doc.status = 'unevaluated';
            if (doc.text.length <= 350) {
              doc.hasMore = false;
              doc.snippet = doc.text;
            } else {
              doc.hasMore = true;
              doc.snippet = doc.text.substring(0, 350) + "...";
            }

            doc.more = false;
          });

          // set the status of each word to unevalauted
          var weights = [];
          _.each(topic.words, function(word) {
            word.status = 'unevaluated';
            weights.push(word.weight);
          });

          // set the topic merge status to false
          topic.merge = false;

          // determine the topic word font size
          var scale = d3.scaleLinear();

          scale.range([8, 32]);
          scale.domain([d3.min(weights), d3.max(weights)]);

          _.each(topic.words, function(word) {
            word.style = "{'font-size':'" + Math.round(scale(word.weight)) + "pt'}";
          });
        });

        // sort the list by topic index
        $scope.topics = _.sortBy($scope.topics, "topicindex");

        $scope.loading = false;
      }

      /**
       * Method to clear refinements
       * @deprecated
       */
      $scope.clearRefinements = function() {
        console.warn('should no longer call this method');
        // we don't support this functionality in the tutorial
        if (!$scope.tutorial.complete) {
          return;
        }

        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked "clear all refinements" with ' + $scope.refinements.length + ' outstanding refinements');

        // undo all refinements
        //TODO: we don't really want to clear topic names, but we have to since we're clearing all refinements which includes topic names
        $scope.topics = $scope.topicsCopy;
        $scope.selectedTopic = $scope.topics[0];
        $scope.topics[0].selected = true;
        $scope.merged = [];
        $scope.refinements = [];
        $scope.isDirty = false;
        $scope.stops = [];
      };

      /**
      * called internally whenever the user applies a refinement
      */
      function save() {
        // don't update the model when the user is on the initial questionnaire portion
        if (!$scope.task.started) {
          return;
        }
        $scope.isDirty = true;
        $scope.loading = true;
        // save the refinements
        $scope.iterationCount += 1;
        TopicService.save($scope.refinements, $scope.corpus, $scope.topicNums, $scope.iterationCount, $scope.tutorial.complete).then(function(data) {
          // process the model
          processModel(data.data);
          // TopicService.getDocuments($scope.corpus, $scope.topicNums).then(function(docs) {
          //    processModel(data.data, docs.data);

          // copy the topics
          $scope.topicsCopy = angular.copy($scope.topics);

          // Select the previously selected topic in the list (if it exists)
          if ($scope.selectedIndex >= $scope.topics.length) {
            $scope.selectedIndex = 0;
          }
          $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
          $scope.topics[$scope.selectedIndex].selected = true;

          // reset the merged list
          $scope.merged = [];

          // clear the refinement list
          $scope.refinements = [];
          $scope.isDirty = false;
          $scope.stops = [];

          //  });

        }, function() {
          // error saving model
          alert('error saving model - reverting to model prior to save');
          // decrement the iteration count
          $scope.iterationCount -= 1;
          $scope.refinements = [];
          $scope.loading = false;
          $scope.isDirty = false;
          $scope.stops = [];
          $scope.merged = [];

        });
      }

      /**
      * Method to undo the last refinement operation.
      */
      $scope.undo = function() {
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step !== 33) {
            $mdDialog.show(
              $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent("Oops, let's wait to use the undo button until later in the tutorial.")
              .ariaLabel('tutorial alert')
              .ok('Got it!')
            );
            return;
          }
        }
        // decrement the iteration count
        $scope.iterationCount -= 1;
        $scope.loading = true;
        TopicService.undo($scope.corpus, $scope.iterationCount, $scope.tutorial.complete).then(function(data) {
          // process the model
          processModel(data.data);

          // copy the topics
          $scope.topicsCopy = angular.copy($scope.topics);

          // Select the previously selected topic in the list (if it exists)
          if ($scope.selectedIndex >= $scope.topics.length) {
            $scope.selectedIndex = 0;
          }
          $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
          $scope.topics[$scope.selectedIndex].selected = true;

          // reset the merged list
          $scope.merged = [];

          // clear the refinement list
          $scope.refinements = [];
          $scope.isDirty = false;
          $scope.stops = [];

          if (!$scope.tutorial.complete) {
            $scope.$broadcast('tutorial-next');
          }

        }, function() {
          // error saving model
          alert('error saving model - reverting to model prior to save');
          // increment the iteration count
          $scope.iterationCount += 1;
          $scope.refinements = [];
          $scope.loading = false;
          $scope.isDirty = false;
          $scope.stops = [];
          $scope.merged = [];

        });
      }

      function tutorialSave() {
        $scope.iterationCount += 1;
        $scope.loading = true;
        $scope.$broadcast('tutorial-next');
        // save the refinements
        TopicService.save($scope.refinements, $scope.corpus, $scope.topicNums, $scope.iterationCount, $scope.tutorial.complete).then(function(data) {
          console.log("the tutorial model has been updated!");
          processModel(data.data);
          // copy the topics
          $scope.topicsCopy = angular.copy($scope.topics);

          // Select the previously selected topic in the list (if it exists)
          if ($scope.selectedIndex >= $scope.topics.length) {
            $scope.selectedIndex = 0;
          }
          $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
          $scope.topics[$scope.selectedIndex].selected = true;

          // reset the merged list
          $scope.merged = [];

          // clear the refinement list
          $scope.refinements = [];
          $scope.isDirty = false;
          $scope.stops = [];

          //  $scope.tutorial.nextEnabled = true;
          $scope.$broadcast('tutorial-next');
        });
      }

      /**
       * Method to save the refined model.
       *
       * @deprecated
       */
      $scope.save = function() {
        console.warn('should no longer call this method');
        $scope.iterationCount += 1;
        // only let the user save during the tutorial if they're on step 13, 22, 25, or 28
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 13 || $scope.tutorial.step === 22 || $scope.tutorial.step === 26 || $scope.tutorial.step === 32) {
            $scope.loading = true;
            //$scope.tutorial.nextEnabled = true;
            $scope.$broadcast('tutorial-next');
            // save the refinements
            TopicService.save($scope.refinements, $scope.corpus, $scope.topicNums, $scope.iterationCount, $scope.tutorial.complete).then(function(data) {
              console.log("the model for " + $scope.corpus + " has been updated!");
              processModel(data.data);
              // copy the topics
              $scope.topicsCopy = angular.copy($scope.topics);

              // Select the previously selected topic in the list (if it exists)
              if ($scope.selectedIndex >= $scope.topics.length) {
                $scope.selectedIndex = 0;
              }
              $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
              $scope.topics[$scope.selectedIndex].selected = true;

              // reset the merged list
              $scope.merged = [];

              // clear the refinement list
              $scope.refinements = [];
              $scope.isDirty = false;
              $scope.stops = [];

              //  $scope.tutorial.nextEnabled = true;
              $scope.$broadcast('tutorial-next');
            });

          } else {
            $mdDialog.show(
              $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent("Let's wait to save until we've performed a few more refinements.")
              .ariaLabel('tutorial alert')
              .ok('Got it!')
            );
            return;
          }
        } else {
          TopicService.log($scope.corpus, $scope.topicNums, 'user clicked "save refinements" with ' + $scope.refinements.length + ' outstanding refinements');
          $scope.loading = true;
          // save the refinements
          TopicService.save($scope.refinements, $scope.corpus, $scope.topicNums, $scope.iterationCount, $scope.tutorial.complete).then(function(data) {
            // process the model
            processModel(data.data);
            // TopicService.getDocuments($scope.corpus, $scope.topicNums).then(function(docs) {
            //    processModel(data.data, docs.data);

            // copy the topics
            $scope.topicsCopy = angular.copy($scope.topics);

            // Select the previously selected topic in the list (if it exists)
            if ($scope.selectedIndex >= $scope.topics.length) {
              $scope.selectedIndex = 0;
            }
            $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
            $scope.topics[$scope.selectedIndex].selected = true;

            // reset the merged list
            $scope.merged = [];

            // clear the refinement list
            $scope.refinements = [];
            $scope.isDirty = false;
            $scope.stops = [];

            //  });

          }, function() {
            // error saving model
            alert('error saving model - reverting to model prior to save');
            $scope.refinements = [];
            $scope.isDirty = false;
            $scope.stops = [];
            $scope.merged = [];

          });
        }


      };

      /**
       * Method to create a new topic. Adds a new, empty topic to the list and selects it. Does not add a create refinement until user adds topic words and confirms the created topic
       */
      $scope.createNewTopic = function() {
        if (!$scope.tutorial.complete) {
          // only allow user to create a new topic if they're on step 28 of the tutorial
          if ($scope.tutorial.step !== 28) {
            return;
          }
        }
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to "create a new topic"');
        // deselect other topics
        _.each($scope.topics, function(topic) {
          topic.selected = false;
        });

        // determine the appropriate topic index
        $scope.totalTopics += 1;
        var index = $scope.totalTopics - 1;

        var topic = {
          "id": index,
          "words": [],
          "docs": [],
          "merge": false,
          "selected": true,
          'topic': 'topic ' + (index + 1),
          'topicindex': index,
          'creating': true
        };

        $scope.topics.push(topic);
        $scope.selectedIndex = $scope.topics.length - 1;
        $scope.selectedTopic = $scope.topics[$scope.selectedIndex];

        $scope.$broadcast('select-topic', topic);
      };

      /**
       * Listen for event from the topic list item to rename a topic. The topic name is stored at topic.topic
       */
      $scope.$on('rename-topic', function(event, topic) {
          TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to rename topic ' + topic.id + ' with the name ' + topic.topic + '; tutorial complete? ' + $scope.tutorial.complete);

        // if on step 2, we should be renaming topic 4 to SPORTS
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 2) {
            // topic 4
          if (topic.id === 3) {
            if (topic.topic.toLowerCase() === 'sports') {
              $scope.tutorial.nextEnabled = true;
            } else {
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, you typed the wrong name, please rename TOPIC 4 to SPORTS.')
                .ariaLabel('tutorial alert')
                .ok('Got it!')
              );
            }
          }
        } else {
          return;
        }
      }
        // update the topic name map and add the refinement to the stack (to be attached to the model on save)
        var refinement = {
          'type': 'updateName',
          'topicId': topic.id,
          'name': topic.topic
        };
        $scope.refinements.push(refinement);
      });

      /**
       * Listen for remove-topic event; either called when a user decides to cancel the topic create process or the user decides to delete a topic
       */
      $scope.$on('remove-topic', function(event, topic) {
        if (topic.creating || topic.created) {
          TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to cancel topic creation for ' + topic.id + '; removing refinement from list');
          // only able to remove topics that were in the process of being created
          $scope.topics = _.without($scope.topics, topic);

          // select the first topic in the list
          $scope.selectedIndex = 0;
          $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
          $scope.selectedTopic.selected = true;
        } else {
          TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to delete topic ' + topic.id + 'tutorial complete?' + $scope.tutorial.complete);

          // if the topic was not in the process of being created, we need to specify a delete topic refinement to the backend
          var refinement = {
            'type': 'deleteTopic',
            'topicId': topic.id,
          };

          // we should only accept a remove refinement if it's on step 9 and it's topic 7
          if (!$scope.tutorial.complete) {
            if ($scope.tutorial.step === 9) {
              if (topic.id === 6) {
                //$scope.tutorial.nextEnabled = true;
                $scope.refinements.push(refinement);
                tutorialSave();
              } else {
                $mdDialog.show(
                  $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, please try again to delete Topic 7.')
                  .ariaLabel('tutorial alert')
                  .ok('Got it!')
                );
                return;
              }
            } else {
              return;
            }
          } else {
            $scope.refinements.push(refinement);
            save();
          }
        }
      });

      $scope.$on('accept-create', function(event, topic) {
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to complete the topic creation for ' + topic.id + '; tutorial complete? ' + $scope.tutorial.complete);

          // add a create topic refinement and an update name refinement
          var refinement = {
            'type': 'createTopic',
            'topicId': topic.id,
            'seedWords': _.pluck(topic.words, 'word')
          };
          var name_refinement = {
            'type': 'updateName',
            'topicId': topic.id,
            'name': topic.topic
          };

        // we should only accept a create refinement if it's on step 28 and we've added the words iphone, facebook, mobile, and internet
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 28) {
            if (_.indexOf(_.pluck(topic.words, 'word'), 'internet') !== -1) {
              //$scope.tutorial.nextEnabled = true;
              $scope.refinements.push(refinement);
              $scope.refinements.push(name_refinement);
              tutorialSave();
            } else {
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, you forgot a word! Try adding the word "internet" to your topic.')
                .ariaLabel('tutorial alert')
                .ok('Got it!')
              );
              return;
            }
          } else {
            return;
          }
        } else {
          $scope.refinements.push(refinement);
          $scope.refinements.push(name_refinement);
          save();
        }
      });

      /**
       * Listen for event to undo the deleted topic (prior to save)
       * @deprecated
       */
      $scope.$on('undo-delete', function(event, topic) {
        console.warn('should not be calling this method');
        // we don't support undo deleting a new topic in the tuturial
        if (!$scope.tutorial.complete) {
          return;
        }

        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo delete for topic ' + topic.id + '; removing refinement from list');

        // remove the refinement
        var indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'deleteTopic' && refinement.topicId === topic.id) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }

        // set topic status to not deleted
        topic.deleted = false;
      });

      /**
       * Listen for event to undo the newly created topic (prior to save)
       * @deprecated
       */
      $scope.$on('undo-create', function(event, topic) {
        console.warn('should not be calling this method');
        // we don't support undo creating a new topic in the tuturial
        if (!$scope.tutorial.complete) {
        //  return;
        }

        // remove the topic from the list
        $scope.topics = _.without($scope.topics, topic);

        // select the first topic in the list
        $scope.selectedIndex = 0;
        $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
        $scope.selectedTopic.selected = true;

        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo topic creation for ' + topic.id + '; removing refinement from list');

        // remove the refinement
        var indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'createTopic' && refinement.topicId === topic.id) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }
      });

      $scope.$on('accept-split', function(event, topic) {
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to accept the split operation for ' + topic.id + '; tutorial complet? ' + $scope.tutorial.complete);

        var refinement = {
          'type': 'splitTopic',
          'topicId': $scope.selectedTopic.id,
          'seedWords': _.pluck(topic.words, 'word')
        };
        // if we're in tutorial mode, only accept the split refinement if it's for topic 5 and the word 'business' is in sub topic B for tutorial step 31
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 31) {
            if ($scope.selectedTopic.id === 4) {
              var words = _.pluck(topic.words, 'word');
              if (_.indexOf(words, 'business') === -1) {
                //$scope.tutorial.nextEnabled = true;
                $scope.refinements.push(refinement);
                tutorialSave();
                $scope.totalTopics += 1;
              } else {
                $mdDialog.show(
                  $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, you missed a business-related word! Try dragging the word "business" to sub topic B.')
                  .ariaLabel('tutorial alert')
                  .ok('Got it!')
                );
                topic.splitting = true;
                topic.split = false;
                return;
              }
            } else {
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, wrong topic! Please select Topic 5 to split.')
                .ariaLabel('tutorial alert')
                .ok('Got it!')
              );
              return;
            }
          } else {
            return;
          }
        } else {
          $scope.refinements.push(refinement);
          save();
          $scope.totalTopics += 1;
        }





      });

      /**
      * @deprecated
      */
      $scope.$on('undo-split', function(event, topic) {
        console.warn('should not be calling this method');
        // we don't support undo in the tuturial
        if (!$scope.tutorial.complete) {
          return;
        }

        topic.words = topic.wordscopy;
        topic.wordscopy = undefined;
        topic.subwords = undefined;
        topic.split = false;

        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo the split operation for ' + topic.id + '; removing refinement from list');

        // remove the refinement
        var indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'splitTopic' && refinement.topicId === topic.id) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }
      });

      /**
      * Method to add a stop word
      */
      $scope.addStopWord = function() {
        if (!$scope.tutorial.complete) {
          // should only add to stop words on step 12
          if ($scope.tutorial.step !== 12) {
            $mdDialog.show(
              $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent("Oops, we only want to use this refinement on Step 13 of the tutorial.")
              .ariaLabel('tutorial alert')
              .ok('Got it!')
            );
            return;
          }
        }
        $scope.$broadcast('topic-stop-word');
      };

      /**
      * Method to accept the merged topics
      */
      $scope.acceptMerge = function() {
        // determine selected topics to merge
        var topics = [];
        var pair = [];
        _.each($scope.topics, function(topic) {
          if (topic.merge) {
            topics.push(topic.id);
            pair.push(topic);
            topic.merge = false;

            // merged status is for display in the topic list
            //topic.merged = true;
          }
        });

        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to accept the merge operation for ' + topics.length + ' topics; tutorial complete? ' + $scope.tutorial.complete);
        $scope.mode = undefined;

        var refinement = {
          'type': 'mergeTopics',
          'topics': topics
        };

        // IF we do not have more than one topic
        if (topics.length <= 1) {
          $mdDialog.show(
            $mdDialog.alert()
            .parent(angular.element(document.body))
            .clickOutsideToClose(true)
            .textContent('please select at least one additional topic to merge')
            .ariaLabel('merge alert')
            .ok('Got it!')
          );
          return;
        }

        // only allowing merge to happen on step 25 between topic 2 and topic 8
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 25) {
            if ((pair[0].id === 1 || pair[0].id === 6) && (pair[1].id === 1 || pair[1].id === 6)) {
              //$scope.tutorial.nextEnabled = true;
              // add the topics as a merge pair
              $scope.merged.push(pair);

              $scope.refinements.push(refinement);
              $scope.isDirty = true;
              tutorialSave();
            } else {
              console.log(pair);
              // incorrect topics chosen for merge
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, incorrect topics chosen for merge, please try again to merge Topic 2 and Topic 8.')
                .ariaLabel('merge alert')
                .ok('Got it!')
              );
            }
          }
        } else {
          // add the topics as a merge pair
          $scope.merged.push(pair);

          $scope.refinements.push(refinement);
          $scope.isDirty = true;
          save();
        }
      };

      /**
      * Method to cancel the in progress merge
      */
      $scope.cancelMerge = function() {
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to cancel the merge operation');
        $scope.mode = undefined;
        _.each($scope.topics, function(topic) {
          topic.merge = false;
        });
      }

      /**
      * @deprecated
      */
      $scope.undoMerge = function(pair) {
        console.warn('should not be calling this method');
        // we don't support undo in the tuturial
        if (!$scope.tutorial.complete) {
          return;
        }

        // remove the merged status from the topics
        _.each(pair, function(p) {
          p.merged = false;
        });

        // remove the topics as a merged pair
        var indexToRemove = -1;
        _.each($scope.merged, function(m, index) {
          if (_.isEqual(m, pair)) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.merged.splice(indexToRemove, 1);
        }

        // remove the refinement
        var topics = [];
        _.each(pair, function(p) {
          topics.push(p.id);
        });

      TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo the merge operation for ' + topics.length + ' topics; removing refinement from list');

        indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'mergeTopics' && _.isEqual(refinement.topics, topics)) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }
      };

      /**
       * Method to go into split 'mode' for the selected topic
       */
      $scope.$on("split", function(event, topic) {
        // only enter split mode on step 31 of tutorial
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 31) {

          } else {
            // shouldn't be merging
            return;
          }
        }

        topic.splitting = true;
        topic.wordscopy = topic.words;

        // AS (8/2): due to the way that the md-chips-draggable directive works
        // add a single 'empty' sub word to support dragging into sub topic B
        topic.subwords = [{
          "status": "hidden"
        }];
      });

      /**
       * Method to go into merge 'mode' for the selected topic
       */
      $scope.$on("merge", function(event, topic) {
        // only enter merge mode on step 25 of tutorial
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 25) {

          } else {
            // shouldn't be merging
            return;
          }
        }
        // enter merge mode
        $scope.mode = 'merge';
        topic.merge = true;
      });

      /**
       * Listen for event to select a topic
       */
      $scope.$on("select", function(event, topic) {
        // if we're in the tutorial and on step 5, only select the topic if it's topic 2
      /*  if ($scope.tutorial.step === 5) {
          if (topic.id !== 1) {
            $mdDialog.show(
              $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent('Please click Topic 2 to continue the tutorial.')
              .ariaLabel('Alert Dialog Demo')
              .ok('Got it!')
            );
            return;
          } else {
            $scope.tutorial.nextEnabled = true;
          }
        } else */

        if ($scope.tutorial.step === 1 && !$scope.tutorial.nextEnabled) {
          // only select the topic if it's 1 or 8
          if (!$scope.tutorial.flags.topic1Selected) {
            if (topic.id !== 0) {
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please click on Topic 1 to continue the tutorial.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
              );
              return;
            } else {
              $scope.tutorial.flags.topic1Selected = true;
            }
          } else {
            if (topic.id !== 7) {
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please click on Topic 8 to continue the tutorial.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
              );
              return;
            } else {
              $scope.tutorial.nextEnabled = true;
            }
          }

        }

        // if we're in merge mode, toggle the merge status
        if ($scope.mode === 'merge') {
          // only allow selection of an unmerged or unsplit topic or uncreated topic
          if (!topic.split && !topic.merged && !topic.selected && !topic.creating && !topic.created) {
            topic.merge = !topic.merge;
          } else {
            console.log("unable to merge with split or merged topic");
          }
        } else {
          // if the current topic is being split, don't let the user move away
          var splitting = _.filter($scope.topics, function(topic) {
            return topic.splitting;
          });

          if (splitting.length > 0) {
            $mdDialog.show(
              $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent('please confirm or cancel your split topic modifications using the x or check buttons.')
              .ariaLabel('Alert Dialog Demo')
              .ok('Got it!')
            );
            return;
          }

          // deselect other topics
          _.each($scope.topics, function(topic) {
            topic.selected = false;
          });

          // select the current topic
          topic.selected = true;
          $scope.selectedTopic = topic;

          // remember this id
          $scope.selectedIndex = topic.topicindex;

          $scope.$broadcast("select-topic", topic);
        }

      });

      /**
      * Called when the user selects a word
      */
      $scope.$on('select-word', function(event, word) {
        // if we're in tutorial mode
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 3) {
            if (word === 'art' && $scope.tutorial.flags.hoverWord) {
              $scope.tutorial.nextEnabled = true;
            } else {
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please hover over the word "fashion" and select the word "art" in Topic 8 to continue the tutorial.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
              );
            }
          }
        }
      });

      /**
      * Called when the user hovers over a word
      */
      $scope.$on('hover-word', function(event, word) {
        // if we're in tutorial mode
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 3) {
            if (word === 'fashion') {
              $scope.tutorial.flags.hoverWord = true;
            }
          }
        }
      });

      /**
      * Called when the user choose to add a stop word
      */
      $scope.$on('add-stop-word', function(event, word) {
        // log the refinement
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to add ' + word + ' to stop words; tutorial complete? ' + $scope.tutorial.complete);

        // create the refinement
        var refinement = {
          'type': 'trash',
          'word': word
        };

        // if we're in tutorial mode, we should only be adding the word 'nbsp' to the stop words list in step 12
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 12) {
            if (word === 'nbsp') {
              //$scope.tutorial.nextEnabled = true;
              // store the stop word
              $scope.stops.push(word);
              $scope.refinements.push(refinement);
              tutorialSave();
            } else {
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, that is not the right word. Please instead add the word "nbsp" (in Topic 1) to the stop words list.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
              );
              return;
            }
          } else {
            return;
          }
        } else {
          // store the stop word
          $scope.stops.push(word);
          $scope.refinements.push(refinement);
          save();
        }
      });

      /**
      * @deprecated
      */
      $scope.$on('undo-stop-word', function(event, word) {
        console.warn('should not be calling this method');
        return;
        // remove the stop word
        $scope.stops = _.without($scope.stops, word);

       TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo adding ' + word + ' to stop words; removing refinement from list');

        var indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'trash' &&
            refinement.word === word) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }
      });

      /**
       * Listen for event to remove a word to the currently selected topic
       */
      $scope.$on('remove-word', function(event, word) {
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to remove ' + word + ' from ' + $scope.selectedTopic.id + '; tutorial complete? ' + $scope.tutorial.complete);

          var refinement = {
            'type': 'removeWord',
            'topicId': $scope.selectedTopic.id,
            'word': word
          };

        // if we're in tutorial mode, we should only be removing the word 'schools' from topic 3 on step 18
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 18) {
            if ($scope.selectedTopic.id === 2) {
              if (word === 'schools') {
                  // add the refinement and update the step
                  //$scope.tutorial.nextEnabled = true;
                  $scope.refinements.push(refinement);
                  tutorialSave();
              } else {
                // alert the user that they need to remove the word including
                $mdDialog.show(
                  $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, that is not the right word. Please remove the word "schools"from the topic words by clicking the "x" button next to the word.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
                );
                return;
              }
            } else {
              // alert the user that they should select topic 7
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please click Topic 3 and remove the word "schools" from the topic words by clicking the "x" button next to the word.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
              );
              return;
            }
          } else {
            return;
          }
        } else {
          $scope.refinements.push(refinement);
          save();
        }
      });

      /**
       * Listen for event to undo a previously removed word for the currently selected topic
       * @deprecated
       */
      $scope.$on('undo-remove-word', function(event, word) {
        console.warn('should not be calling this method');
        return;
        // we should only undo the remove word refinement for tutorial step 12 and the word 'year'
        if (!$scope.tutorial.complete && $scope.tutorial.step === 12) {
          if (word === 'year') {
            $scope.tutorial.nextEnabled = true;
          } else {
            // alert the user that they should remove the word year
            $mdDialog.show(
              $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent('Oops, wrong word. Please remove the word "year" by clicking the undo button next to the word')
              .ariaLabel('Alert Dialog Demo')
              .ok('Got it!')
            );
            return;
          }
        }

              TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo removing ' + word + ' from ' + $scope.selectedTopic.id + '; removing refinement from list');

        var indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'removeWord' &&
            refinement.topicId === $scope.selectedTopic.id &&
            refinement.word === word) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }
      });

      /**
       * Listen for event to re-order the word in the currently selected topic
       */
      // AS (5/2/16): the order indices are updated in the UI after the refinement, so if
      // two re-orderings are performed, the indices of the latter refinement will not make sense
      // based on the indices prior to the former refinement - this should only affect the backend if
      // refinements are not applied in order
      $scope.$on('reorder-word', function(event, word, to, from) {
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to reorder ' + word + ' from ' + from + ' to ' + to + ' in topic '+ $scope.selectedTopic.id + '; tutorial complete? ' + $scope.tutorial.complete);

        var refinement = {
          'type': 'changeWordOrder',
          'word': word,
          'originalPosition': from,
          'newPosition': to,
          'topicId': $scope.selectedTopic.id
        };

        // if we're in tutorial mode, we should only be re-ordering the word 'album' to the third position in Topic 2 in step 15
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 15) {
            if ($scope.selectedTopic.id === 1) {
              if (word === 'album') {
                if (to === 2) {
                  // update the step
                //  $scope.tutorial.nextEnabled = true;
                  $scope.refinements.push(refinement);
                  tutorialSave();
                } else {
                  // alert the user to change the word's placement to 3
                  $mdDialog.show(
                    $mdDialog.alert()
                    .parent(angular.element(document.body))
                    .clickOutsideToClose(true)
                    .textContent('Oops, that is not the right position. Please drag the word "album" to the third position in the list.')
                    .ariaLabel('Alert Dialog Demo')
                    .ok('Got it!')
                  );
                  return;
                }
              } else {
                // alert the user to change the word order of 'album'
                $mdDialog.show(
                  $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, that is not the right word. Please drag the word "album" to the third position in the list.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
                );
                return;
              }
            } else {
              // alert the user to select topic 3
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please click Topic 2 to continue.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
              );
              return;
            }
          } else {
            return;
          }
        } else {
          $scope.refinements.push(refinement);
          save();
        }
      });

      /**
       * Listen for event to update the reorder word refinement for the given word and original position
       * @deprecated
       */
      $scope.$on('update-reorder-word', function(event, word, to, from) {
        console.warn('should not be calling this method');
        return;
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 10) {
            if ($scope.selectedTopic.id === 6) {
              if (word === 'awards') {
                if (to === 2) {
                  $scope.tutorial.nextEnabled = true;
                } else {
                  return;
                }
              } else {
                return;
              }
            } else {
              return;
            }
          } else {
            return;
          }
        }

              TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to update reordering ' + word + ' from ' + from + ' to ' + to + ' in topic '+ $scope.selectedTopic.id + '; updating refinement in list');

        _.each($scope.refinements, function(refinement) {
          if (refinement.type === 'changeWordOrder' &&
            refinement.topicId === $scope.selectedTopic.id &&
            refinement.word === word &&
            refinement.originalPosition === from) {
            // update the to location
            refinement.newPosition = to;
          }
        });
      })

      /**
       * Listen for event to undo previously re-ordered word in the topic
       * @deprecated
       */
      $scope.$on('undo-reorder-word', function(event, word, to, from) {
        console.warn('should not be calling this method');
        return;
                      TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo reordering ' + word + ' from ' + from + ' to ' + to + ' in topic '+ $scope.selectedTopic.id + '; removing refinement from list');
        var indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'changeWordOrder' &&
            refinement.originalPosition === from &&
            refinement.newPosition === to &&
            refinement.word === word &&
            refinement.topicId === $scope.selectedTopic.id) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }
      });

      /**
       * Listen for event to add a word to the currently selected topic
       */
      $scope.$on('add-word', function(event, word) {
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to add ' + word + ' to topic '+ $scope.selectedTopic.id + '. Tutorial Complete?' + $scope.tutorial.complete);

        var refinement = {
          'type': 'addWord',
          'topicId': $scope.selectedTopic.id,
          'word': word
        };

        // if we're in tutorial mode, the only add word operation should be 'oscar' to topic 2 on step 6
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 6) {
            if ($scope.selectedTopic.id === 1) {
              if (word === 'oscar' || word === 'Oscar') {
                // add the refinement and save
                //$scope.tutorial.nextEnabled = true;

                $scope.refinements.push(refinement);
                tutorialSave();
              } else {
                // alert the user to add the word Oscar to the topic
                $mdDialog.show(
                  $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('please add the word "Oscar" to the topic using the add word functionality.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
                );
                return;
              }
            } else {
              // alert the user to select topic 7 and add the word oscar
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('please select Topic 7 and add the word "Oscar" using the add word functionality.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
              );
              return;
            }
          } else {
            // alert the user that you cannot add words during this step
            return;
          }
        } else {
          // during the task, add the refinement and save
          $scope.refinements.push(refinement);
          save();
        }

      });

      /**
       * Listen for event to undo a previously removed word for the currently selected topic
       */
      $scope.$on('undo-add-word', function(event, word) {
        console.warn('should only be calling this method if the user wants to undo an added word from a created topic');
        return;

        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo adding ' + word + ' to topic '+ $scope.selectedTopic.id + '; removing refinement from list');

        // AS (4/7/16): there has to be a better way to do this...
        var indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'addWord' &&
            refinement.topicId === $scope.selectedTopic.id &&
            refinement.word === word) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }
      });

      /**
       * Listen for event to remove a document from the currently selected topic
       */
      $scope.$on('remove-doc', function(event, doc) {
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to remove ' + doc + ' from topic '+ $scope.selectedTopic.id + '; tutorial complete? ' + $scope.tutorial.complete);

        var refinement = {
        'type': 'removeDocument',
        'topicId': $scope.selectedTopic.id,
        'documentId': doc
        };

        // if we're in tutorial mode, the only remove doc operation that should occur should be on step 22 removing the fourth document from topic 6
        if (!$scope.tutorial.complete) {
          if ($scope.tutorial.step === 22) {
            if ($scope.selectedTopic.id === 5) {
              // TODO: check the doc id
              if (doc === 1695) {
                //$scope.tutorial.nextEnabled = true;
                $scope.refinements.push(refinement);
                tutorialSave();
              } else {
                // alert the user to delete the right document
                $mdDialog.show(
                  $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, wrong document! Please remove the fourth document in the list, which is about the Grammys.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
                );
                return;
              }
            } else {
              // alert the user to select topic 6
              $mdDialog.show(
                $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, wrong topic! Please select Topic 6.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
              );
              return;
            }
          } else {
            return;
          }
        } else {
          $scope.refinements.push(refinement);
          save();
        }
      });

      /**
       * Listen for event to undo a previously removed word for the currently selected topic
       * @deprecated
       */
      $scope.$on('undo-remove-doc', function(event, doc) {
        console.warn('should not be calling this method');
        return;
        TopicService.log($scope.corpus, $scope.topicNums, 'user clicked to undo removing ' + doc + ' from topic '+ $scope.selectedTopic.id + '; removing refinement from list');
        var indexToRemove = -1;
        _.each($scope.refinements, function(refinement, index) {
          // find the match
          if (refinement.type === 'removeDocument' &&
            refinement.topicId === $scope.selectedTopic.id &&
            refinement.documentId === doc) {
            indexToRemove = index;
          }
        });
        if (indexToRemove !== -1) {
          $scope.refinements.splice(indexToRemove, 1);
        }
      });
    }

  });
