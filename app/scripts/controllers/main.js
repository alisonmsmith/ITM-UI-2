'use strict';

/**
 * @ngdoc function
 * @name itmUiApp.controller:MainCtrl
 * @description
 * # MainCtrl
 * Controller of the itmUiApp
 */
angular.module('itmUiApp')
  .controller('MainCtrl',  function($scope, $state, $http, TopicService, $mdDialog) {

    // get the current user
    $scope.user = TopicService.getUser();

    // if we don't have a user, go to the login page
    if (!$scope.user) {
      $state.go('login');
    } else {

      // if we do have a user, start the tutorial
      $scope.tutorial = {
        'complete':false,
        'step':0,
        'nextEnabled':true,
        'flags':{}
      };

      $scope.task = {
        'started': false
      };

      // pop up a modal about the tutorial
      // alert the user that they need to remove the word including
      if (!$scope.tutorial.complete) {
        $mdDialog.show(
          $mdDialog.alert()
            //.parent(angular.element(document.body))
            .clickOutsideToClose(false)
            .textContent('This tool allows you to explore and modify topics (themes) in a collection of documents. These topics are generated by a computer-based system. Each topic is represented by a lists of words that make up the topic and documents that are associated with the topic. We will begin with a tutorial to walk you through using the tool. Please follow the instructions in the left panel and click "Next" to continue through each tutorial step.')
            .ariaLabel('Tutorial Dialog')
            .ok('OK')
        );
      }

   // $scope.documents = [];
    $scope.topics = [];
    $scope.topicsCopy = [];
    $scope.refinements = [];
    $scope.mode = undefined;
    $scope.merged = [];
    $scope.loading = true;
    $scope.stops = [];
    $scope.vocab = [];
    $scope.topicNameMap = {};

    // DEFAULT VALUES FOR CORPORA AND TOPIC NUMBERS
    $scope.corpus = "bbc_news";
    $scope.topicNums = 10;

    // METHODS REQUIRED FOR DROPPABLE TRASH CAN
    angular.element(document).find('.stop-words').on('dragover', dragOverHandler);
    angular.element(document).find('.stop-words').on('drop', dropHandler);

    function dragOverHandler(ev) {
      ev.preventDefault();
    }

    function dropHandler(ev) {
      ev.preventDefault();
    }

    // Get all corpora
    TopicService.getCorpora().then(function(data) {
      $scope.corpora = data.data.corpus;
    });

    // Load the intial model
    loadModel(3);

    function loadModel(index) {
      $scope.loading = true;
      TopicService.loadModel($scope.corpus, $scope.topicNums, $scope.tutorial.complete).then(function(data) {
        console.log("loaded the model for " + $scope.corpus)
        processModel(data.data);

          // Select to display the first topic in the list
          if (index) {
            $scope.selectedIndex = index;
          } else {
            $scope.selectedIndex = 0;
          }
          $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
          $scope.topicsCopy = angular.copy($scope.topics);
          $scope.topics[$scope.selectedIndex].selected = true;
       // });
     }, function() {
       // on error
       console.error("error loading initial model");
     });

     // get the vocabulary
     TopicService.getVocab($scope.corpus).then(function(response) {
       console.log('loaded the vocabulary for ' + $scope.corpus);
       $scope.vocab = response.data;
     });
    }


    $scope.endTutorial = function() {

      // pop up message with instructions
      $mdDialog.show(
        $mdDialog.confirm()
          .clickOutsideToClose(false)
          .textContent('In the tutorial, you saw different problems with how the system generates topics and how to fix them by applying different refinement operations. We will now show you topics for another news document dataset and your task will be to improve the system generated topics by applying the different refinement operations.')
          .ariaLabel('Tutorial Complete Dialog')
          .ok('OK')
      ).then(function() {
        $scope.tutorial.complete = true;
        // load ITM with the task url, but do not yet start the timer
        $scope.corpus = "gnews";
        $scope.topicNums = 10;
        loadModel();
        // pop up message with instructions
        $mdDialog.show(
          $mdDialog.confirm()
            .clickOutsideToClose(false)
            .textContent('First, please carefully review the system generated topics. We will give you a questionnaire in which you need to answer a few questions related to these topics. The questionnaire will open in a different tab in your browser so that you can review the topics in the tool while answering the questions. Here is the link to the questionnaire: XXX. After you have opened the questionnaire in a new tab click ‘OK’ to close out of this pop-up and review the system generated topics.')
            .ariaLabel('Tutorial Complete Dialog')
            .ok('OK')
        ).then(function() {
          // now the user can look around at the model, but we still don't want to start the timer, or really let them do anything to change the model at all
        });
      });
    }

    $scope.startTask = function() {
      // pop up message with instructions
      $mdDialog.show(
        $mdDialog.confirm()
          .clickOutsideToClose(false)
          .textContent('Your task is to improve the system generated topics by applying different refinement operations. Please note that there is no one correct order to apply these refinements and you can apply different refinement operation in any order.')
          .ariaLabel('Task Start Dialog')
          .ok('OK')
      ).then(function() {
        // start the timer
        $scope.task.started = true;
        // load ITM with the task url
        $scope.corpus = "gnews";
        $scope.topicNums = 10;
        loadModel();
      });

    }

    $scope.finishTask = function() {
      $mdDialog.show(
        $mdDialog.confirm()
          .clickOutsideToClose(false)
          .textContent('Thank you for finishing the task of refining the topics. To finish up, we would like you to answer a few questions related to the final topics that you have generated.')
          .ariaLabel('Task Finish Dialog')
          .ok('OK')
      ).then(function() {
        // DONE!
        $scope.task.started = false;
      });
    }

    /**
    * Dialog box to allow the user to set the corpus and number of topics for the interface.
    */
    $scope.configureModel = function(ev) {
        $mdDialog.show({
          controller: DialogController,
          templateUrl: 'views/configure-model.tmpl.html',
          parent: angular.element(document.body),
          targetEvent: ev,
          clickOutsideToClose:true,
          locals: {
            corpus: $scope.corpus,
            number: $scope.topicNums,
            corpora: $scope.corpora
          }
        })
        .then(function(data) {
          $scope.corpus = data.corpus;
          $scope.topicNums = data.number;
          loadModel();
        }, function() {
          //cancel
        });
    };

    function DialogController($scope, $mdDialog, corpus, number, corpora) {
      $scope.corpus = corpus;
      $scope.number = number;
      $scope.corpora = corpora;
      $scope.hide = function() {
        $mdDialog.hide();
      };
      $scope.cancel = function() {
        $mdDialog.cancel();
      };
      $scope.submit = function(corpus, number) {
        var data = {corpus: corpus,
                    number: number};
        $mdDialog.hide(data);
      };
    };

    /**
    * Method to process the model returned from the server
    */
    function processModel(data) {
      $scope.topics = data.topics;

      // determine the display words for each topic
      _.each($scope.topics, function(topic) {
        // set the topic id based on its index
        // TODO: should use a unique id
        topic.id = topic.topicindex;

        // determine if we have a name for this topic based on index
        if (topic.id in $scope.topicNameMap) {
          topic.topic = $scope.topicNameMap[topic.id];
        }

        // choose the topic label as the first three words of the topic
        var display = '';
        display += topic.words[0].word + ' ' + topic.words[1].word + ' ' + topic.words[2].word;
        topic.displayWords = display;

        // set document to unevalauted and compute snippet
        _.each(topic.docs, function(doc) {
          doc.status = 'unevaluated';
          if (doc.text.length <= 350) {
            doc.hasMore = false;
            doc.snippet = doc.text;
          } else {
            doc.hasMore = true;
            doc.snippet = doc.text.substring(0,350) + "...";
          }

          doc.more = false;
        });

        // set the status of each word to unevalauted
        var weights = [];
        _.each(topic.words, function(word) {
          word.status = 'unevaluated';
          weights.push(word.weight);
        });

        // set the topic merge status to false
        topic.merge = false;

        // determine the topic word font size
        var scale = d3.scaleLinear();

        scale.range([8,32]);
        scale.domain([d3.min(weights), d3.max(weights)]);

        _.each(topic.words, function(word) {
          word.style = "{'font-size':'" + Math.round(scale(word.weight)) + "pt'}";
        });
      });

      // sort the list by topic index
      $scope.topics = _.sortBy($scope.topics, "topicindex");

      $scope.loading = false;
    }

    /**
    * Method to clear refinements
    */
    $scope.clearRefinements = function() {
      // we don't support this functionality in the tutorial
      if (!$scope.tutorial.complete) {
        return;
      }

      // undo all refinements
      $scope.topics = $scope.topicsCopy;
      $scope.selectedTopic = $scope.topics[0];
      $scope.topics[0].selected = true;
      $scope.merged = [];
      $scope.refinements = [];
      $scope.isDirty = false;
      $scope.stops = [];
    }

    /**
     * Method to save the refined model.
     */
    $scope.save = function() {
      // only let the user save during the tutorial if they're on step 13, 22, 25, or 28
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 13 || $scope.tutorial.step === 22 || $scope.tutorial.step === 25 || $scope.tutorial.step === 28) {
          $scope.loading = true;
          //$scope.tutorial.nextEnabled = true;
          $scope.$broadcast('tutorial-next');
          // save the refinements
          TopicService.save($scope.refinements, $scope.corpus, $scope.topicNums, $scope.tutorial.complete).then(function(data) {
            console.log("the model for " + $scope.corpus + " has been updated!")
            processModel(data.data);
            // copy the topics
              $scope.topicsCopy = angular.copy($scope.topics);

              // Select the previously selected topic in the list (if it exists)
              if ($scope.selectedIndex >= $scope.topics.length) {
                $scope.selectedIndex = 0;
              }
              $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
              $scope.topics[$scope.selectedIndex].selected = true;

              // reset the merged list
              $scope.merged = [];

              // clear the refinement list
              $scope.refinements = [];
              $scope.isDirty = false;
              $scope.stops = [];

            //  $scope.tutorial.nextEnabled = true;
            $scope.$broadcast('tutorial-next');
          });

        } else {
          $mdDialog.show(
            $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent("Let's wait to save until we've performed a few more refinements.")
              .ariaLabel('tutorial alert')
              .ok('Got it!')
          );
          return;
        }
      } else {
        $scope.loading = true;
        // save the refinements
        TopicService.save($scope.refinements, $scope.corpus, $scope.topicNums, $scope.tutorial.complete).then(function(data) {
          console.log("the model has been updated!")
          processModel(data.data);
         // TopicService.getDocuments($scope.corpus, $scope.topicNums).then(function(docs) {
        //    processModel(data.data, docs.data);

          // copy the topics
            $scope.topicsCopy = angular.copy($scope.topics);

            // Select the previously selected topic in the list (if it exists)
            if ($scope.selectedIndex >= $scope.topics.length) {
              $scope.selectedIndex = 0;
            }
            $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
            $scope.topics[$scope.selectedIndex].selected = true;

            // reset the merged list
            $scope.merged = [];

            // clear the refinement list
            $scope.refinements = [];
            $scope.isDirty = false;
            $scope.stops = [];
        //  });

      }, function() {
        // error saving model
        alert('error saving model - reverting to model prior to save');
        $scope.refinements = [];
        $scope.isDirty = false;
        $scope.stops = [];
        $scope.merged = [];

      });
      }


    };

    /**
    * Method to create a new topic
    */
    $scope.createNewTopic = function() {
      // deselect other topics
      _.each($scope.topics, function(topic) {
        topic.selected = false;
      });

      var index = $scope.topics.length
      var topic = {
        "id": index,
        "words":[],
        "docs":[],
        "merge":false,
        "selected": true,
        'topic': 'topic ' + (index+1),
        'topicindex': index,
        'creating': true
      };

      $scope.topics.push(topic);
      $scope.selectedIndex = index;
      $scope.selectedTopic = $scope.topics[$scope.selectedIndex];

      $scope.$broadcast('select-topic', topic);
    }

    /**
    * Listen for event from the topic list item to rename a topic. The topic name is stored at topic.topic
    */
    $scope.$on('rename-topic', function(event, topic) {
      // if on step 2, we should be renaming topic 1 to SPORTS
      if ($scope.tutorial.step === 2) {
        if (topic.id === 0) {
          if (topic.topic === 'SPORTS') {
            $scope.tutorial.nextEnabled = true;
          } else {
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, you typed the wrong name, please rename TOPIC 1 to SPORTS.')
                .ariaLabel('tutorial alert')
                .ok('Got it!')
            );
          }
        }
      }
      $scope.topicNameMap[topic.id] = topic.topic;
    });

    $scope.$on('remove-topic', function(event, topic) {
      // only able to remove topics that were in the process of being created
      $scope.topics = _.without($scope.topics, topic);

      // select the first topic in the list
      $scope.selectedIndex = 0;
      $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
      $scope.selectedTopic.selected = true;
    });

    $scope.$on('accept-create', function(event, topic) {
      // we should only accept a create refinement if it's on step 27 and we've added the words football, game, and sport
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 27) {
          if (_.indexOf(_.pluck(topic.words, 'word'), 'sport') !== -1) {
            $scope.tutorial.nextEnabled = true;
          } else {
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, you forgot a word! Try adding the word "sport" to your topic.')
                .ariaLabel('tutorial alert')
                .ok('Got it!')
            );
            return;
          }
        } else {
          return;
        }
      }

      var refinement = {
        'type': 'createTopic',
        'topicId': topic.id,
        'seedWords': _.pluck(topic.words, 'word')
      };
      $scope.refinements.push(refinement);
    });

    $scope.$on('undo-create', function(event, topic) {
      // we don't support undo in the tuturial
      if (!$scope.tutorial.complete) {
        return;
      }

      // remove the topic
      $scope.topics = _.without($scope.topics, topic);

      // select the first topic in the list
      $scope.selectedIndex = 0;
      $scope.selectedTopic = $scope.topics[$scope.selectedIndex];
      $scope.selectedTopic.selected = true;

      // remove the refinement
      var indexToRemove = -1;
      _.each($scope.refinements, function(refinement, index) {
        // find the match
        if (refinement.type === 'createTopic'
          && refinement.topicId === topic.id) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.refinements.splice(indexToRemove, 1);
      }
    });

    $scope.$on('accept-split', function(event, topic) {
      // if we're in tutorial mode, only accept the split refinement if it's for topic 7 and the word 'music' is in sub topic B for tutorial step 24
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 24) {
          if ($scope.selectedTopic.id === 5) {
            var words = _.pluck(topic.words, 'word');
            if (_.indexOf(words, 'music') === -1) {
              $scope.tutorial.nextEnabled = true;
            } else {
              $mdDialog.show(
                $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, you missed a music-related word! Try dragging the word "music" to sub topic B.')
                  .ariaLabel('tutorial alert')
                  .ok('Got it!')
              );
              topic.splitting = true;
              topic.split = false;
              return;
            }
          } else {
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, wrong topic! Please select Topic 6 to split.')
                .ariaLabel('tutorial alert')
                .ok('Got it!')
            );
            return;
          }
        } else {
          return;
        }
      }

      var refinement = {
        'type': 'splitTopic',
        'topicId': $scope.selectedTopic.id,
        'seedWords': _.pluck(topic.words, 'word')
      };
      $scope.refinements.push(refinement);
    });

    $scope.$on('undo-split', function(event, topic) {
      // we don't support undo in the tuturial
      if (!$scope.tutorial.complete) {
        return;
      }

      topic.words = topic.wordscopy;
      topic.wordscopy = undefined;
      topic.subwords = undefined;
      topic.split = false;

      // remove the refinement
      var indexToRemove = -1;
      _.each($scope.refinements, function(refinement, index) {
        // find the match
        if (refinement.type === 'splitTopic'
          && refinement.topicId === topic.id) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.refinements.splice(indexToRemove, 1);
      }
    });

    $scope.addStopWord = function() {
      $scope.$broadcast('topic-stop-word');
    };

    $scope.acceptMerge = function() {
      $scope.mode = undefined;

      // determine selected topics to merge
      var topics = [];
      var pair = [];
      _.each($scope.topics, function(topic) {
        if (topic.merge) {
          topics.push(topic.id);
          pair.push(topic);
          topic.merge = false;

          // merged status is for display in the topic list
          topic.merged = true;
        }
      });

      // IF we do not have more than one topic
      if (topics.length <= 1) {
                      $mdDialog.show(
                $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('please select at least one additional topic to merge')
                  .ariaLabel('merge alert')
                  .ok('Got it!')
              );
        return;
      }

      // only allowing merge to happen on step 21 between topic 5 and topic 6
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 21) {
          if ((pair[0].id === 5 || pair[0].id === 4) && (pair[1].id === 5 || pair[1].id === 4)) {
            $scope.tutorial.nextEnabled = true;
          } else {
            // incorrect topics chosen for merge
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, incorrect topics chosen for merge, please try again.')
                .ariaLabel('merge alert')
                .ok('Got it!')
            );
            return;
          }
        } else {
          return;
        }
      }

      // add the topics as a merge pair
      $scope.merged.push(pair);

      var refinement = {
        'type': 'mergeTopics',
        'topics': topics
      };
      $scope.refinements.push(refinement);
      $scope.isDirty = true;
    }

    $scope.cancelMerge = function() {
      $scope.mode = undefined;
      _.each($scope.topics, function(topic) {
        topic.merge = false;
      });
    }

    $scope.undoMerge = function(pair) {
      // we don't support undo in the tuturial
      if (!$scope.tutorial.complete) {
        return;
      }

      // remove the merged status from the topics
      _.each(pair, function(p) {
        p.merged = false;
      });

      // remove the topics as a merged pair
      var indexToRemove = -1;
      _.each($scope.merged, function(m, index) {
        if (_.isEqual(m, pair)) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.merged.splice(indexToRemove, 1);
      }

      // remove the refinement
      var topics = [];
      _.each(pair, function(p) {
        topics.push(p.id);
      });

      indexToRemove = -1;
      _.each($scope.refinements, function(refinement, index) {
        // find the match
        if (refinement.type === 'mergeTopics' && _.isEqual(refinement.topics,topics)) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.refinements.splice(indexToRemove, 1);
      }
    }

    /**
    * Method to go into split 'mode' for the selected topic
    */
    $scope.$on("split", function(event, topic) {
      // only enter split mode on step 24 of tutorial
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 24) {

        } else {
          // shouldn't be merging
          return;
        }
      }

      topic.splitting = true;
      topic.wordscopy = topic.words;

      // AS (8/2): due to the way that the md-chips-draggable directive works
      // add a single 'empty' sub word to support dragging into sub topic B
      topic.subwords = [{"status":"hidden"}];
    });

    /**
    * Method to go into merge 'mode' for the selected topic
    */
    $scope.$on("merge", function(event, topic) {
      // only enter merge mode on step 21 of tutorial
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 21) {

        } else {
          // shouldn't be merging
          return;
        }
      }
      // enter merge mode
      $scope.mode = 'merge';
      topic.merge = true;
    });

    /**
    * Listen for event to select a topic
    */
    $scope.$on("select", function(event, topic) {
      // if we're in the tutorial and on step 4, only select the topic if it's topic 7
      if ($scope.tutorial.step === 5) {
        if (topic.id !== 6) {
          $mdDialog.show(
            $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent('Please click Topic 7 to continue the tutorial.')
              .ariaLabel('Alert Dialog Demo')
              .ok('Got it!')
          );
          return;
        } else {
          $scope.tutorial.nextEnabled = true;
        }
      } else if ($scope.tutorial.step === 1 && !$scope.tutorial.nextEnabled) {
        // only select the topic if it's 1 or 8
        if (!$scope.tutorial.flags.topic1Selected) {
          if (topic.id !== 0) {
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please click on Topic 1 to continue the tutorial.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
            );
            return;
          } else {
            $scope.tutorial.flags.topic1Selected = true;
          }
        } else {
          if (topic.id !== 7) {
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please click on Topic 8 to continue the tutorial.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
            );
            return;
          } else {
            $scope.tutorial.nextEnabled = true;
          }
        }

      }

      // if we're in merge mode, toggle the merge status
      if ($scope.mode === 'merge') {
        // only allow selection of an unmerged or unsplit topic or uncreated topic
        if (!topic.split && !topic.merged && !topic.selected && !topic.creating && !topic.created) {
          topic.merge = !topic.merge;
        } else {
          console.log("unable to merge with split or merged topic");
        }
      } else {
        // if the current topic is being split, don't let the user move away
        var splitting = _.filter($scope.topics, function(topic) {
          return topic.splitting;
        });

        if (splitting.length > 0) {
              $mdDialog.show(
                $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('please confirm or cancel your split topic modifications using the x or check buttons.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
              );
          return;
        }

        // deselect other topics
        _.each($scope.topics, function(topic) {
          topic.selected = false;
        });

        // select the current topic
        topic.selected = true;
        $scope.selectedTopic = topic;

        // remember this id
        $scope.selectedIndex = topic.topicindex;

        $scope.$broadcast("select-topic", topic);
      }

    });

    $scope.$on('select-word', function(event, word) {
      // if we're in tutorial mode
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 3) {
          if (word === 'year' && $scope.tutorial.flags.hoverWord) {
            $scope.tutorial.nextEnabled = true;
          } else {
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please hover over the word "world" and select the word "year" in Topic 8 to continue the tutorial.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
            );
          }
        }
      }
    });

    $scope.$on('hover-word', function(event, word) {
      // if we're in tutorial mode
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 3) {
          if (word === 'world') {
            $scope.tutorial.flags.hoverWord = true;
          }
        }
      }
    });

    $scope.$on('add-stop-word', function(event, word) {
      // if we're in tutorial mode, we should only be adding the word 'year' to the stop words list in step 18
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 18) {
          if (word === 'year') {
            $scope.tutorial.nextEnabled = true;
          } else {
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, that is not the right word. Please instead add the word "year" to the stop words list.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
            );
            return;
          }
        } else {
          return;
        }
      }

      // store the stop word
      $scope.stops.push(word);

      // create the refinement
      var refinement = {
        'type': 'trash',
        'word': word
      };
      $scope.refinements.push(refinement);
    });

    $scope.$on('undo-stop-word', function(event, word) {
      // remove the stop word
      $scope.stops = _.without($scope.stops, word);

      var indexToRemove = -1;
      _.each($scope.refinements, function(refinement, index) {
        // find the match
        if (refinement.type === 'trash'
          && refinement.word === word) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.refinements.splice(indexToRemove, 1);
      }
    });

    /**
     * Listen for event to remove a word to the currently selected topic
     */
    $scope.$on('remove-word', function(event, word) {

      // if we're in tutorial mode, we should only be removing the word including or year from topic 7 on step 8
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 8) {
          if ($scope.selectedTopic.id === 6) {
            if (word === 'including' || word === 'year') {
              if ($scope.tutorial.flags.removedWord) {
                // add the refinement and update the step
                $scope.tutorial.nextEnabled = true;
              } else {
                $scope.tutorial.flags.removedWord = true;
              }

            } else {
              // alert the user that they need to remove the word including
              $mdDialog.show(
                $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, that is not the right word. Please remove the word "including" and the word "year" from the topic words by clicking the "x" button next to those word.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
              );
              return;
            }
          } else {
            // alert the user that they should select topic 7
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please click Topic 7 and remove the word "including" from the topic words by clicking the "x" button next to the word.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
            );
            return;
          }
        } else {
          return;
        }
      }

      var refinement = {
        'type': 'removeWord',
        'topicId': $scope.selectedTopic.id,
        'word': word
      };
      $scope.refinements.push(refinement);
    });

    /**
    * Listen for event to undo a previously removed word for the currently selected topic
    */
    $scope.$on('undo-remove-word', function(event, word) {
      // we should only undo the remove word refinement for tutorial step 12 and the word 'year'
      if (!$scope.tutorial.complete && $scope.tutorial.step === 12) {
        if (word === 'year') {
          $scope.tutorial.nextEnabled = true;
        } else {
          // alert the user that they should remove the word year
          $mdDialog.show(
            $mdDialog.alert()
              .parent(angular.element(document.body))
              .clickOutsideToClose(true)
              .textContent('Oops, wrong word. Please remove the word "year" by clicking the undo button next to the word')
              .ariaLabel('Alert Dialog Demo')
              .ok('Got it!')
          );
          return;
        }
      }

      var indexToRemove = -1;
      _.each($scope.refinements, function(refinement, index) {
        // find the match
        if (refinement.type === 'removeWord'
          && refinement.topicId === $scope.selectedTopic.id
          && refinement.word === word) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.refinements.splice(indexToRemove, 1);
      }
    });

    /**
    * Listen for event to re-order the word in the currently selected topic
    */
    // AS (5/2/16): the order indices are updated in the UI after the refinement, so if
    // two re-orderings are performed, the indices of the latter refinement will not make sense
    // based on the indices prior to the former refinement - this should only affect the backend if
    // refinements are not applied in order
    $scope.$on('reorder-word', function(event, word, to, from) {

      // if we're in tutorial mode, we should only be re-ordering the word 'award' to the third position in Topic 7 in step 10
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 10) {
          if ($scope.selectedTopic.id === 6) {
            if (word === 'awards') {
              if (to === 2) {
                // update the step
                $scope.tutorial.nextEnabled = true;
              } else {
                // alert the user to change the word's placement to 3
                $mdDialog.show(
                  $mdDialog.alert()
                    .parent(angular.element(document.body))
                    .clickOutsideToClose(true)
                    .textContent('Oops, that is not the right position. Please drag the word "awards" to the third position in the list.')
                    .ariaLabel('Alert Dialog Demo')
                    .ok('Got it!')
                );
                return;
              }
            } else {
              // alert the user to change the word order of 'award'
              $mdDialog.show(
                $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, that is not the right word. Please drag the word "awards" to the third position in the list.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
              );
              return;
            }
          } else {
            // alert the user to select topic 7
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Please click Topic 7 to continue.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
            );
            return;
          }
        } else {
          return;
        }
      }

      var refinement ={
        'type': 'changeWordOrder',
        'word': word,
        'originalPosition': from,
        'newPosition': to,
        'topicId': $scope.selectedTopic.id
      };
      $scope.refinements.push(refinement);
      console.log($scope.refinements);
    });

    /**
    * Listen for event to update the reorder word refinement for the given word and original position
    */
    $scope.$on('update-reorder-word', function(event, word, to, from) {
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 10) {
          if ($scope.selectedTopic.id === 6) {
            if (word === 'awards') {
              if (to === 2) {
                $scope.tutorial.nextEnabled = true;
              } else {
                return;
              }
            } else {
              return;
            }
          } else {
            return;
          }
        } else {
          return;
        }
      }
      _.each($scope.refinements, function(refinement) {
        if (refinement.type === 'changeWordOrder'
          && refinement.topicId === $scope.selectedTopic.id
          && refinement.word === word
          && refinement.originalPosition === from) {
          // update the to location
          refinement.newPosition = to;
        }
      });
      console.log($scope.refinements);
    })

    /**
    * Listen for event to undo previously re-ordered word in the topic
    */
    $scope.$on('undo-reorder-word', function(event, word, to, from) {
      var indexToRemove = -1;
      _.each($scope.refinements, function(refinement, index) {
        // find the match
        if (refinement.type === 'changeWordOrder'
          && refinement.originalPosition === from
          && refinement.newPosition === to
          && refinement.word === word
          && refinement.topicId === $scope.selectedTopic.id) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.refinements.splice(indexToRemove, 1);
      }
      console.log($scope.refinements);
    });

    /**
     * Listen for event to add a word to the currently selected topic
     */
    $scope.$on('add-word', function(event, word) {

      // if we're in tutorial mode, the only add word operation should be 'oscar' to topic 7 on step 6
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 6) {
          if ($scope.selectedTopic.id === 6) {
            if (word === 'oscar' || word === 'Oscar') {
              // add the refinement and update the step
              $scope.tutorial.nextEnabled = true;
            } else {
              // alert the user to add the word Oscar to the topic
              $mdDialog.show(
                $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('please add the word "Oscar" to the topic using the add word functionality.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
              );
              return;
            }
          } else {
            // alert the user to select topic 7 and add the word oscar
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('please select Topic 7 and add the word "Oscar" using the add word functionality.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
            );
            return;
          }
        } else {
          // alert the user that you cannot add words during this step
          return;
        }
      }

        var refinement = {
          'type': 'addWord',
          'topicId': $scope.selectedTopic.id,
          'word': word
        };
        $scope.refinements.push(refinement);



    });

    /**
    * Listen for event to undo a previously removed word for the currently selected topic
    */
    $scope.$on('undo-add-word', function(event, word) {

      // AS (4/7/16): there has to be a better way to do this...
      var indexToRemove = -1;
      _.each($scope.refinements, function(refinement, index) {
        // find the match
        if (refinement.type === 'addWord'
          && refinement.topicId === $scope.selectedTopic.id
          && refinement.word === word) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.refinements.splice(indexToRemove, 1);
      }
     /* $scope.refinements = _.without($scope.refinements, {
        'type': 'addWord',
        'topicId': $scope.selectedTopic.id,
        'word': word
      });*/
    });

    /**
     * Listen for event to remove a document from the currently selected topic
     */
    $scope.$on('remove-doc', function(event, doc) {
      // if we're in tutorial mode, the only remove doc operation that should occur should be on step 16 removing the fourth document from topic 6
      if (!$scope.tutorial.complete) {
        if ($scope.tutorial.step === 16) {
          if ($scope.selectedTopic.id === 5) {
            if (doc === 35) {
              $scope.tutorial.nextEnabled = true;
            } else {
              // alert the user to select topic 6
              $mdDialog.show(
                $mdDialog.alert()
                  .parent(angular.element(document.body))
                  .clickOutsideToClose(true)
                  .textContent('Oops, wrong document! Please remove the fourth document in the list about terror suspects facing house arrest.')
                  .ariaLabel('Alert Dialog Demo')
                  .ok('Got it!')
              );
              return;
            }
          } else {
            // alert the user to select topic 6
            $mdDialog.show(
              $mdDialog.alert()
                .parent(angular.element(document.body))
                .clickOutsideToClose(true)
                .textContent('Oops, wrong topic! Please select Topic 6.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
            );
            return;
          }
        } else {
          return;
        }
      }

      var refinement = {
        'type': 'removeDocument',
        'topicId': $scope.selectedTopic.id,
        'documentId': doc
      };
      $scope.refinements.push(refinement);
    });

    /**
    * Listen for event to undo a previously removed word for the currently selected topic
    */
    $scope.$on('undo-remove-doc', function(event, doc) {
      var indexToRemove = -1;
      _.each($scope.refinements, function(refinement, index) {
        // find the match
        if (refinement.type === 'removeDocument'
          && refinement.topicId === $scope.selectedTopic.id
          && refinement.documentId === doc) {
          indexToRemove = index;
        }
      });
      if (indexToRemove !== -1) {
        $scope.refinements.splice(indexToRemove, 1);
      }
    });
}

  });
